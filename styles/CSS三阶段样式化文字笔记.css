/*
说到字体可用性，只有某几个字体通常可以应用到所有系统，因此可以毫无顾忌地使用。这些都是所谓的 网页安全字体。
大多数时候，作为网页开发者，我们希望对用于显示我们的文本内容的字体有更具体的控制。
问题在于，需要一个方法来知道当前正在浏览我们的网站网页的电脑，它有哪些可用字体。
我们并不是总能在每种情况下都知道这一点，但是网络安全字体在几乎所有最常用的操作系统（Windows，Mac，最常见的 Linux 发行版，Android 和 iOS 版本）中都可用。


  字体名称	                   泛型	                                               注意
    Arial	                 sans-serif	                通常认为最佳做法还是添加 [Helvetica] 作为 Arial 的首选替代品，尽管它们的字体面几乎相同，
                                                                但 Helvetica 被认为具有更好的形状，即使 Arial 更广泛地可用。
  Courier New	              nmonospace	            某些操作系统有一个 Courier New 字体的替代（可能较旧的）版本叫 Courier。
                                                               使用 Courier New 作为 Courier 的首选替代方案，被认为是最佳做法。
   Georgia	                   serif	
  Times New Roman	          serif	                   某些操作系统有一个 Times New Roman 字体的替代（可能较旧的）版本叫 Times。
                                                         使用 Times 作为 Times New Roman 的首选替代方案，被认为是最佳做法。
  Trebuchet MS	             sans-serif	                              您应该小心使用这种字体——它在移动操作系统上并不广泛。
  Verdana	                 sans-serif	
 [常用安全web文字字体 ] 
 
CSS常用默认字体
  名称	                                        定义	                                                           示例
 serif	                有衬线的字体（衬线一词是指字体笔画尾端的小装饰，存在于某些印刷体字体中）	                  My big red elephant
 sans-serif	                             没有衬线的字体。	                                                      My big red elephant
 monospace	                  每个字符具有相同宽度的字体，通常用于代码列表。	                                    My big red elephant
 cursive	                       用于模拟笔迹的字体，具有流动的连接笔画。	                                       My big red elephant
 fantasy	                           用来装饰的字体	                                                            My big red elephant
 [注意: 有一些字体名称不止一个单词，比如Trebuchet MS ，那么就需要用引号包裹。]

 浏览器的 font-size 标准设置的值为 16px。在根元素中的任何段落 (或者那些浏览器没有设置默认大小的元素)，会有一个最终的大小值：16px。
*/
/* 标准文档整体CSS字体基础大小代码*/
html {
    font-size: 10px;
  }
  
  h1 {
    font-size: 2.6rem;
  }
  
  p {
    font-size: 1.4rem;
    color: red;
    font-family: Helvetica, Arial, sans-serif;
  }
 
  /*(主要字体样式代码摘要）
font-style: 用来打开和关闭文本 italic (斜体)。可能的值如下 (你很少会用到这个属性，除非你因为一些理由想将斜体文字关闭斜体状态)：
normal: 将文本设置为普通字体 (将存在的斜体关闭)
italic: 如果当前字体的斜体版本可用，那么文本设置为斜体版本；如果不可用，那么会利用 oblique 状态来模拟 italics。
oblique: 将文本设置为斜体字体的模拟版本，也就是将普通文本倾斜的样式应用到文本中。

font-weight: 设置文字的粗体大小。这里有很多值可选 (比如 -light, -normal, -bold, -extrabold, -black, 等等), 
不过事实上你很少会用到 normal 和 bold以外的值：
normal, bold: 普通或者加粗的字体粗细
lighter, bolder: 将当前元素的粗体设置为比其父元素粗体更细或更粗一步。100–900: 数值粗体值，如果需要，可提供比上述关键字更精细的粒度控制。

text-transform: 允许你设置要转换的字体。值包括：
none: 防止任何转型。
uppercase: 将所有文本转为大写。
lowercase: 将所有文本转为小写。
capitalize: 转换所有单词让其首字母大写。
full-width: 将所有字形转换成全角，即固定宽度的正方形，类似于等宽字体，允许拉丁字符和亚洲语言字形（如中文，日文，韩文）对齐。

text-decoration: 设置/取消字体上的文本装饰 (你将主要使用此方法在设置链接时取消设置链接上的默认下划线。) 可用值为：
none: 取消已经存在的任何文本装饰。
underline: 文本下划线.
overline: 文本上划线
line-through: 穿过文本的线 strikethrough over the text.
  
[text-shadow: 4px 4px 5px red;]
4 个属性如下：

1、阴影与原始文本的水平偏移，可以使用大多数的 CSS 单位 length and size units, 但是 px 是比较合适的。这个值必须指定。
2、阴影与原始文本的垂直偏移;效果基本上就像水平偏移，除了它向上/向下移动阴影，而不是左/右。这个值必须指定。
3、模糊半径 - 更高的值意味着阴影分散得更广泛。如果不包含此值，则默认为 0，这意味着没有模糊。可以使用大多数的 CSS 单位 length and size units.
4、阴影的基础颜色，可以使用大多数的 CSS 颜色单位 CSS color unit. 如果没有指定，默认为 black.  

text-align 属性用来控制文本如何和它所在的内容盒子对齐:
   left: 左对齐文本。
   right: 右对齐文本。
   center: 居中文字
   [justify]: 使文本展开，改变单词之间的差距，使所有文本行的宽度相同。你需要仔细使用，它可以看起来很可怕。
    特别是当应用于其中有很多长单词的段落时。如果你要使用这个，你也应该考虑一起使用别的东西，比如 hyphens，打破一些更长的词语。
(行高 line-height)
line-height 属性设置文本每行之间的高，不过也可以设置一个无单位的值，作为乘数，通常这种是比较好的做法。无单位的值乘以 font-size 来获得 line-height。
推荐的行高大约是 1.5–2 (双倍间距。) 所以要把我们的文本行高设置为字体高度的 1.5 倍.

letter-spacing 和 word-spacing 属性允许你设置你的文本中的字母与字母之间的间距、或是单词与单词之间的间距。

          [Font 样式：]

font-variant: 在小型大写字母和普通文本选项之间切换。
font-kerning: 开启或关闭字体间距选项。
font-feature-settings: 开启或关闭不同的 OpenType 字体特性。
font-variant-alternates: 控制给定的自定义字体的替代字形的使用。
font-variant-caps: 控制大写字母替代字形的使用。
font-variant-east-asian (en-US): 控制东亚文字替代字形的使用，像日语和汉语。
font-variant-ligatures: 控制文本中使用的连写和上下文形式。
font-variant-numeric: 控制数字，分式和序标的替代字形的使用。
font-variant-position: 控制位于上标或下标处，字号更小的替代字形的使用。
font-size-adjust: 独立于字体的实际大小尺寸，调整其可视大小尺寸。
font-stretch: 在给定字体的可选拉伸版本中切换。
text-underline-position: 指定下划线的排版位置，通过使用 text-decoration-line 属性的underline 值。
text-rendering: 尝试执行一些文本渲染优化。

              [文本布局样式：]

text-indent: 指定文本内容的第一行前面应该留出多少的水平空间。
text-overflow: 定义如何向用户表示存在被隐藏的溢出内容。
white-space: 定义如何处理元素内部的空白和换行。
word-break: 指定是否能在单词内部换行。
direction: 定义文本的方向 (这取决于语言，并且通常最好让 HTML 来处理这部分，因为它是和文本内容相关联的。)
hyphens: 为支持的语言开启或关闭连字符。
line-break: 对东亚语言采用更强或更弱的换行规则。
text-align-last: 定义一个块或行的最后一行，恰好位于一个强制换行前时，如何对齐。
text-orientation: 定义行内文本的方向。
word-wrap: 指定浏览器是否可以在单词内换行以避免超出范围。
writing-mode: 定义文本行布局为水平还是垂直，以及后继文本流的方向。

许多字体的属性也可以通过 font 的简写方式来设置 . 这些是按照以下顺序来写的： 
[ font-style, font-variant, font-weight, font-stretch, font-size, line-height, and font-family.]
如果你想要使用 font 的简写形式，在所有这些属性中，只有 font-size 和 font-family 是一定要指定的。
font-size 和 line-height 属性之间必须放一个正斜杠。

font: italic normal bold normal 3em/1.5 Helvetica, Arial, sans-serif;(font简写样例)

[样式化列表类]

现在我们来看一下列表的一般间距，我们来研究一些列表具有的特定属性。我们从三个属性开始了解，这三个属性可以在 <ul> 或  <ol> 元素上设置：

list-style-type ：设置用于列表的项目符号的类型，例如无序列表的方形或圆形项目符号，或有序列表的数字，字母或罗马数字。
list-style-position ：设置在每个项目开始之前，项目符号是出现在列表项内，还是出现在其外。
list-style-image ：允许您为项目符号使用自定义图片，而不是简单的方形或圆形。

background-position: 这定义了所选元素背景中的图像将出现在哪里 - 在我们的示例中设置 0 0，这意味着项目符号将出现在每个列表项的最左上侧。

start 属性允许你从 1 以外的数字开始计数。
<ol start="4">(代码样例)
  <li>Toast pitta, leave to cool, then slice down the edge.</li>
  <li>Fry the halloumi in a shallow, non-stick pan, until browned on both sides.</li>
  <li>Wash and chop the salad.</li>
  <li>Fill pitta with salad, humous, and fried halloumi.</li>
</ol>
reversed 属性将启动列表倒计数。[<ol start="4" reversed>]代码属性添加位置样例

value 属性允许设置列表项指定数值，示例如下：
<ol>
  <li value="2">Toast pitta, leave to cool, then slice down the edge.</li>
  <li value="4">Fry the halloumi in a shallow, non-stick pan, until browned on both sides.</li>
  <li value="6">Wash and chop the salad.</li>
  <li value="8">Fill pitta with salad, humous, and fried halloumi.</li>
</ol>
[高级复杂的表格数序CSS属性]
@counter-style
counter-increment
counter-reset

第一件需要理解的事情是链接状态的概念，链接存在时处于不同的状态，每一个状态都可以用对应的 伪类 来应用样式：
[各类链接样式]
Link (没有访问过的): 这是链接的默认状态，当它没有处在其他状态的时候，它可以使用:link 伪类来应用样式。
Visited: 这个链接已经被访问过了 (存在于浏览器的历史纪录), 它可以使用 :visited 伪类来应用样式。
Hover: 当用户的鼠标光标刚好停留在这个链接，它可以使用 :hover 伪类来应用样式。
Focus: 一个链接当它被选中的时候 (比如通过键盘的 Tab  移动到这个链接的时候，或者使用编程的方法来选中这个链接 HTMLElement.focus() (en-US)) 它可以使用 :focus 伪类来应用样式。
Active: 一个链接当它被激活的时候 (比如被点击的时候)，它可以使用 :active 伪类来应用样式。
可以使用以下 CSS 属性关闭/更改默认样式：
color 文字的颜色
cursor 鼠标光标的样式，你不应该把这个关掉，除非你有非常好的理由。
outline 文字的轮廓 (轮廓有点像边框，唯一的区别是边框占用了盒模型的空间，而轮廓没有； 它只是设置在背景图片的顶部)。
outline 是一个有用的辅助功能，所以在把它关掉之前考虑清楚；你至少应该将悬停 (hover) 状态的样式同时应用到选中 (focus) 状态上。

(链接样式的正确排列顺序)
a:link {
}
a:visited {
}
a:focus {
}
a:hover {
}
a:active {
}

a {
  outline: none;
  text-decoration: none;
  padding: 2px 1px 0;
}
a:link {
  color: #265301;
}
a:visited {
  color: #437A16;
}
a:focus {
  border-bottom: 1px solid;
  background: #BAE498;
}
a:hover {
  border-bottom: 1px solid;
  background: #CDFEAA;
}
a:active {
  background: #265301;
  color: #CDFEAA;
}

常见的做法是在链接中包含图标，使链接提供更多关于链接指向的内容的信息。让我们来看一个简单的例子，
例子中为一个外部链接 (链接指向的不是本站，而是外部站点)。这样的图标通常看起来像一个指向盒子的小箭头，比如，
我们会使用 href="icons8.com" 上的这个优秀的范例。

(链接插入图片样例)
a[href*="http"] {
  background: url('https://mdn.mozillademos.org/files/12982/external-link-52.png') no-repeat 100% 0;(100%使图标只能插入在右边)
  background-size: 16px 16px;
  padding-right: 19px;(为链接图标留下右边的空区域)
}
[较高级链接样式化代码]
li {
  display: inline;
}

a {
  outline: none;
  text-decoration: none;
  display: inline-block;
  width: 19.5%;
  margin-right: 0.625%;
  text-align: center;
  line-height: 3;
  color: black;
}

li:last-child a {
  margin-right: 0;
}

a:link, a:visited, a:focus {
  background: yellow;
}

a:hover {
  background: orange;
}

a:active {
  background: red;
  color: white;
}

首先，在 CSS 的开始处有一个@font-face块，它指定要下载的字体文件：

@font-face {
  font-family: "myFont";
  src: url("myFont.ttf");
}
在这个下面，你可以使用 @font-face 中指定的字体种类名称来将你的定制字体应用到你喜欢的任何东西上，比如说：

html {
  font-family: "myFont", "Bitstream Vera Serif", serif;
}
免费的字体经销商：这是一个可以下载免费字体的网站 (可能还有一些许可条件，比如对字体创建者的信赖)。比如： Font Squirre，dafont 和 Everything Fonts。

让我们来探索由 fontsquirrel 为您生成的@font-face语法。这是其中一个块的样子：
("bulletproof @font-face syntax（刀枪不入的 @font-face 语法）")
@font-face {
  font-family: 'ciclefina';
  src: url('fonts/cicle_fina-webfont.eot');
  src: url('fonts/cicle_fina-webfont.eot?#iefix') format('embedded-opentype'),
         url('fonts/cicle_fina-webfont.woff2') format('woff2'),
         url('fonts/cicle_fina-webfont.woff') format('woff'),
         url('fonts/cicle_fina-webfont.ttf') format('truetype'),
         url('fonts/cicle_fina-webfont.svg#ciclefina') format('svg');
  font-weight: normal;
  font-style: normal;
}
收费的字体经销商：这是一个收费则字体可用的网站，例如fonts.com或myfonts.com。您也可以直接从字体铸造厂中购买字体，例如Linotype，Monotype 或 Exljbris。

在线字体服务通常会为你存储和服务字体，这样你就不用担心写@font-face代码了，通常只需要在你的网站上插入一两行代码就可以让一切都运行。例子包括Typekit 和Cloud.typography。
大多数这些服务都是基于订阅的，除了Google Fonts，这是一个有用的免费服务，特别是对于快速的测试工作和编写演示。


  */
 
 
 
 
 
 
 
 
 
 
 
 




